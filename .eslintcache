[{"C:\\Users\\User\\Projects\\chat-app\\client\\src\\index.js":"1","C:\\Users\\User\\Projects\\chat-app\\client\\src\\App.js":"2","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\NavBar.js":"3","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Register.js":"4","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Chat.js":"5","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\SocketContext.js":"6","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Contacts.js":"7","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\AddConnection.js":"8","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Menu.js":"9","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\LogIn.js":"10","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\ChatContext.js":"11","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\AuthContext.js":"12","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\AppProviders.js":"13"},{"size":411,"mtime":1611224184121,"results":"14","hashOfConfig":"15"},{"size":447,"mtime":1611260133300,"results":"16","hashOfConfig":"15"},{"size":483,"mtime":1611222680581,"results":"17","hashOfConfig":"15"},{"size":5837,"mtime":1611222680581,"results":"18","hashOfConfig":"15"},{"size":3914,"mtime":1611222680580,"results":"19","hashOfConfig":"15"},{"size":2860,"mtime":1611222680580,"results":"20","hashOfConfig":"15"},{"size":2151,"mtime":1611222680581,"results":"21","hashOfConfig":"15"},{"size":3152,"mtime":1611222680587,"results":"22","hashOfConfig":"15"},{"size":2425,"mtime":1611222680581,"results":"23","hashOfConfig":"15"},{"size":5406,"mtime":1611222680581,"results":"24","hashOfConfig":"15"},{"size":4143,"mtime":1611260133450,"results":"25","hashOfConfig":"15"},{"size":1009,"mtime":1611260133450,"results":"26","hashOfConfig":"15"},{"size":433,"mtime":1611224009740,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ej3mat",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Projects\\chat-app\\client\\src\\index.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\App.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\NavBar.js",["61"],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Register.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Chat.js",["62","63"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport { useSession } from \"../Context/ChatContext\";\r\nimport { useSocket } from \"../Context/SocketContext\";\r\n\r\nexport default function Chat(props) {\r\n  const history = useHistory();\r\n  const {\r\n    user,\r\n    setUser,\r\n    createContactsList,\r\n    conversation,\r\n    setConversation,\r\n    currConversation,\r\n    theirLiveText,\r\n  } = useSession();\r\n  const chatBottom = useRef();\r\n  const messageRef = useRef();\r\n  // const [chatHeight, setChatHeight] = useState(\"\");\r\n  const { socket, startSocketConnection } = useSocket();\r\n\r\n  const scrollToBottom = () => {\r\n    if (chatBottom.current) {\r\n      chatBottom.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  const asyncStart = async (userObj) => {\r\n    await setUser(userObj);\r\n    await createContactsList(userObj.connections);\r\n    startSocketConnection(userObj);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      fetch(process.env.REACT_APP_PORT_SERVER, {\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        // \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.authenticated === false) {\r\n            console.log(\"Start session to enter chat.\");\r\n            history.push(\"/\");\r\n          } else {\r\n            asyncStart(res.user);\r\n\r\n            console.log(\r\n              `User ${res.user.username} has been correctly authenticated.`\r\n            );\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n\r\n    // let windowHeight = window.innerHeight;\r\n    // setChatHeight(`${windowHeight}px`);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [conversation, setConversation]);\r\n\r\n  const handleMessage = (e) => {\r\n    e.preventDefault();\r\n    if (!messageRef.current[\"message\"].value) {\r\n      return;\r\n    }\r\n\r\n    const messageData = {\r\n      senderId: user._id,\r\n      recipientId: currConversation._id,\r\n      content: messageRef.current[\"message\"].value,\r\n    };\r\n\r\n    const roomId = currConversation.roomId;\r\n\r\n    socket.emit(\"message\", messageData, roomId);\r\n\r\n    messageRef.current[\"message\"].value = \"\";\r\n  };\r\n\r\n  const handleLiveText = (e) => {\r\n    socket.emit(\"live text\", e.target.value);\r\n  };\r\n\r\n  const messageClass = (m) => {\r\n    if (currConversation.isLive && user._id === m.senderId) {\r\n      return \"my-message\";\r\n    } else if (user._id === m.senderId) {\r\n      return \"my-message\";\r\n    } else {\r\n      return \"their-message\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Chat\">\r\n      <div ref={chatBottom}></div>\r\n      {conversation && (\r\n        <ul className=\"chat-log\">\r\n          <div className=\"chat-bottom\"></div>\r\n          {currConversation.isLive && theirLiveText && (\r\n            <li>\r\n              <div className=\"their-live-text\">{theirLiveText}</div>\r\n            </li>\r\n          )}\r\n          {conversation.map((m, index) => (\r\n            <li\r\n              key={index}\r\n              className={\r\n                user._id === m.senderId\r\n                  ? \"my-message-line\"\r\n                  : \"their-message-line\"\r\n              }\r\n            >\r\n              <div className={user && messageClass(m)}>{m.content}</div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <form onSubmit={handleMessage} className=\"message-form\" ref={messageRef}>\r\n        <input\r\n          onChange={(e) => {\r\n            currConversation.isLive && handleLiveText(e);\r\n          }}\r\n          className={\r\n            currConversation.isLive\r\n              ? \"message-input live-message-input\"\r\n              : \"message-input\"\r\n          }\r\n          name=\"message\"\r\n          autoComplete=\"off\"\r\n        ></input>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n",["64","65"],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\SocketContext.js",["66","67"],"import { io } from \"socket.io-client\";\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { useSession } from \"./ChatContext\";\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ children }) {\r\n  const [socket, setSocket] = useState(null);\r\n  const {\r\n    user,\r\n    contactsList,\r\n    setConversation,\r\n    currConversation,\r\n    updateOnlineStatus,\r\n    updateLiveStatus,\r\n    theirLiveText,\r\n    setTheirLiveText,\r\n  } = useSession();\r\n  // const [theirLiveCursor, setTheirLiveCursor] = useState(0);\r\n\r\n  const startSocketConnection = (userObj) => {\r\n    setSocket(\r\n      io(`${process.env.REACT_APP_PORT_SERVER}/chat`, {\r\n        query: userObj,\r\n        withCredentials: true,\r\n      })\r\n    );\r\n  };\r\n\r\n  const isContact = async (userData) => {\r\n    if (contactsList) {\r\n      const found = await contactsList.find(\r\n        (contact) => userData.userId === contact._id\r\n      );\r\n      return found ? true : false;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const clientIsRecipient = (userData) => {\r\n    const answer = userData.recipientId === user._id;\r\n    return answer;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket && user) {\r\n      socket.on(\"connect\", () => {\r\n        socket.emit(\"online status\", { userId: user._id, isOnline: true });\r\n        console.log(`Send status: ${user.username} is online.`);\r\n      });\r\n\r\n      socket.on(\"user status update\", (userData) => {\r\n        const userIsContact = isContact(userData);\r\n        if (userIsContact) {\r\n          updateOnlineStatus(userData);\r\n        }\r\n        socket.emit(\"user status back\", { userId: user._id, isOnline: true });\r\n      });\r\n\r\n      socket.on(\"user status back\", (userData) => {\r\n        const userIsContact = isContact(userData);\r\n        if (userIsContact) {\r\n          updateOnlineStatus(userData);\r\n        }\r\n      });\r\n\r\n      socket.on(\"user is live\", async (userData) => {\r\n        const userIsContact = await isContact(userData);\r\n        const isLive = clientIsRecipient(userData);\r\n        if (userIsContact) {\r\n          updateLiveStatus(userData, isLive);\r\n        }\r\n        console.log(userData);\r\n      });\r\n\r\n      socket.on(\"user logged out\", (userData) => {\r\n        updateOnlineStatus(userData);\r\n      });\r\n\r\n      socket.on(\"message\", (msg) => {\r\n        if (theirLiveText) {\r\n          setTheirLiveText(\"\");\r\n        }\r\n        setConversation((prevConversation) => [msg, ...prevConversation]);\r\n      });\r\n      socket.on(\"live text\", async (liveText) => {\r\n        setTheirLiveText(liveText);\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  const values = {\r\n    socket,\r\n    setSocket,\r\n    startSocketConnection,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={values}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Contacts.js",["68"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSession } from \"../Context/ChatContext\";\r\nimport { useSocket } from \"../Context/SocketContext\";\r\n\r\nexport default function Contacts(props) {\r\n  const {\r\n    user,\r\n    // setUser,\r\n    // conversation,\r\n    setConversation,\r\n    contactsList,\r\n    currConversation,\r\n    setCurrConversation,\r\n  } = useSession();\r\n  const { socket } = useSocket();\r\n  const [selectedContact, setSelectedContact] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    currConversation && console.log(currConversation);\r\n  }, [currConversation, currConversation]);\r\n\r\n  const openConversation = async (contact) => {\r\n    // if (currConversation.username !== contact.username) {\r\n    const roomId = (await contact.isLive)\r\n      ? contact.roomId\r\n      : `${contact.username}${user.username}`;\r\n    const userData = {\r\n      userId: user._id,\r\n      recipientId: contact._id,\r\n      isLive: true,\r\n      roomId: roomId,\r\n    };\r\n    socket.emit(\"join room\", userData);\r\n    setCurrConversation(() => {\r\n      return { ...contact, roomId: userData.roomId };\r\n    });\r\n    socket.once(\"chat history\", (messages) => {\r\n      setConversation(messages);\r\n    });\r\n    setSelectedContact(contact._id);\r\n    // }\r\n  };\r\n\r\n  const contactClass = (contact) => {\r\n    if (contact.isLive && contact._id === selectedContact) {\r\n      return \"contact live-contact-open\";\r\n    } else if (contact.isLive) {\r\n      return \"contact live-contact\";\r\n    } else if (contact.isOnline && contact._id === selectedContact) {\r\n      return \"contact online-contact-open\";\r\n    } else if (contact.isOnline) {\r\n      return \"contact online-contact\";\r\n    } else if (contact._id === selectedContact) {\r\n      return \"contact selected-contact\";\r\n    } else {\r\n      return \"contact inactive-contact\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"connections\">\r\n      {contactsList &&\r\n        contactsList.map((contact, index) => (\r\n          <span\r\n            onClick={() => openConversation(contact)}\r\n            className={contactClass(contact)}\r\n          >\r\n            {contact.username}\r\n          </span>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\AddConnection.js",["69"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useSession } from \"../Context/ChatContext\";\r\n\r\nexport default function AddConnection(props) {\r\n  const { user, setUser, currConversation, createContactsList } = useSession();\r\n  const addContactForm = useRef();\r\n  const [showAddInput, setShowAddInput] = useState(false);\r\n  const [showAddTitle, setShowAddTitle] = useState(false);\r\n  const [showCloseButton, setShowCloseButton] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setShowAddInput(false);\r\n    setShowCloseButton(false);\r\n  }, [currConversation]);\r\n\r\n  const handleAdd = async (e) => {\r\n    e.preventDefault();\r\n    if (!showAddInput) {\r\n      toggleAdd();\r\n      return;\r\n    }\r\n\r\n    const newContact = {\r\n      username: addContactForm.current[\"username\"].value,\r\n    };\r\n    const contactExists = user.connections\r\n      ? user.connections.find(\r\n          (contact) => contact.username === newContact.username\r\n        )\r\n      : false;\r\n    if (contactExists) {\r\n      console.log(`User ${newContact.username} is already a contact.`);\r\n    } else {\r\n      // console.log(`Request to add this contact: ${JSON.stringify(newContact)}`);\r\n      fetch(`${process.env.REACT_APP_PORT_SERVER}/connections`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        credentials: \"include\",\r\n        body: JSON.stringify(newContact),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.success === true) {\r\n            console.log(res.updatedContacts);\r\n            createContactsList(res.updatedContacts);\r\n            // setUser((prevUser) => {\r\n            //   return { ...prevUser, connections: res.updatedContacts };\r\n            // });\r\n          } else {\r\n            console.log(res.message);\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n    addContactForm.current[\"username\"].value = \"\";\r\n    toggleAdd();\r\n  };\r\n\r\n  const toggleAdd = () => {\r\n    setShowAddInput((prev) => !prev);\r\n    setShowAddTitle(false);\r\n    setShowCloseButton((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <form className=\"add-contact\" ref={addContactForm} onSubmit={handleAdd}>\r\n      <button\r\n        onMouseEnter={() => setShowAddTitle(true)}\r\n        onMouseLeave={() => setShowAddTitle(false)}\r\n        onClick={handleAdd}\r\n        type=\"submit\"\r\n      >\r\n        <span className=\"material-icons\">\r\n          {showCloseButton ? \"close\" : \"add_circle\"}\r\n        </span>\r\n      </button>\r\n      <input\r\n        className={\r\n          showAddInput ? \"add-contact-input\" : \"add-contact-input hide-input\"\r\n        }\r\n        name=\"username\"\r\n        type=\"text\"\r\n        placeholder=\"Contact username\"\r\n      ></input>\r\n      <div\r\n        className={`add-contact-text ${\r\n          showAddTitle ? \"show-add-contact-text\" : \"hide-add-contact-text\"\r\n        }`}\r\n      >\r\n        Add contact\r\n      </div>\r\n      <div\r\n        className={\r\n          showAddInput\r\n            ? \"dark-background\"\r\n            : \"dark-background hide-dark-background\"\r\n        }\r\n        onClick={showAddInput && toggleAdd}\r\n      ></div>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Menu.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\LogIn.js",["70","71","72","73"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSession } from \"../Context/ChatContext\";\r\nimport { useSocket } from \"../Context/SocketContext\";\r\n\r\nexport default function LogIn() {\r\n  let history = useHistory();\r\n  const { user, setUser, createContactsList } = useSession();\r\n  const { startSocketConnection } = useSocket();\r\n  const usernameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const [showUsernameInput, setShowUsernameInput] = useState(true);\r\n  const [showEmailInput, setShowEmailInput] = useState(false);\r\n  const [showPasswordInput, setShowPasswordInput] = useState(false);\r\n  const [userExists, setUserExists] = useState(false);\r\n  const [usernameInput, setUsernameInput] = useState(\"\");\r\n  const [passwordInput, setPasswordInput] = useState(\"\");\r\n\r\n  const asyncStart = async (userObj) => {\r\n    await setUser(userObj);\r\n    await createContactsList(userObj.connections);\r\n    await startSocketConnection(userObj);\r\n    history.push(\"/chat\");\r\n  };\r\n\r\n  const storeUsername = (e) => {\r\n    e.preventDefault();\r\n    //Check all fields are correctly filled out\r\n    const username = usernameRef.current[\"username\"].value;\r\n\r\n    setUsernameInput(username);\r\n\r\n    fetch(`${process.env.REACT_APP_PORT_SERVER}/login/username`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      // \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n      credentials: \"include\",\r\n      body: JSON.stringify({ username: username }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(username, res.success);\r\n        if (res.success === true) {\r\n          setUserExists(true);\r\n          setShowUsernameInput(false);\r\n          setShowPasswordInput(true);\r\n        } else {\r\n          setUserExists(false);\r\n          setShowUsernameInput(false);\r\n          setShowPasswordInput(true);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const storePassword = () => {\r\n    setPasswordInput(passwordRef.current[\"password\"].value);\r\n    setShowPasswordInput(false);\r\n    setShowEmailInput(true);\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    if (userExists) {\r\n      const loginData = {\r\n        username: usernameInput,\r\n        password: passwordRef.current[\"password\"].value,\r\n      };\r\n\r\n      fetch(`${process.env.REACT_APP_PORT_SERVER}/login`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(loginData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        // \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n        credentials: \"include\",\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.success === true) {\r\n            asyncStart(res.user);\r\n          } else {\r\n            console.log(res.message);\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      storePassword();\r\n    }\r\n  };\r\n\r\n  const registerUser = (e) => {\r\n    e.preventDefault();\r\n    const registerData = {\r\n      username: usernameInput,\r\n      password: passwordInput,\r\n      email: emailRef.current[\"email\"].value,\r\n    };\r\n    fetch(`${process.env.REACT_APP_PORT_SERVER}/register`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      // \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n      credentials: \"include\",\r\n      body: JSON.stringify(registerData),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.success === true) {\r\n          asyncStart(res.user);\r\n        } else {\r\n          console.log(res.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        debugger;\r\n      });\r\n  };\r\n\r\n  const goBack = () => {\r\n    setShowPasswordInput(false);\r\n    setShowUsernameInput(true);\r\n    // if (showPasswordInput) {\r\n    //   setShowPasswordInput(false);\r\n    //   setShowUsernameInput(true);\r\n    // } else {\r\n    //   setShowEmailInput(false);\r\n    //   setShowPasswordInput(true);\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-area\">\r\n      <form\r\n        ref={usernameRef}\r\n        className={`login-input ${\r\n          showUsernameInput ? \"show-login-input\" : \"hide-login-input\"\r\n        }`}\r\n        onSubmit={storeUsername}\r\n      >\r\n        <input name=\"username\" required></input>\r\n        <p>username</p>\r\n      </form>\r\n\r\n      <form\r\n        ref={passwordRef}\r\n        className={`login-input later-input ${\r\n          showPasswordInput ? \"show-login-input\" : \"hide-login-input\"\r\n        }`}\r\n        onSubmit={handleLogin}\r\n      >\r\n        <p class=\"material-icons go-back\" onClick={goBack}>\r\n          keyboard_backspace\r\n        </p>\r\n        <input type=\"password\" name=\"password\" required></input>\r\n        <p>password</p>\r\n      </form>\r\n\r\n      {/* <form\r\n        ref={emailRef}\r\n        className={`login-input later-input ${\r\n          showEmailInput ? \"show-login-input\" : \"hide-login-input\"\r\n        }`}\r\n        onSubmit={registerUser}\r\n      >\r\n        <p className=\"go-back\" onClick={goBack}>\r\n          {\"<\"}\r\n        </p>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          // required\r\n        ></input>\r\n        <p>email</p>\r\n      </form> */}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\ChatContext.js",["74","75"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = React.createContext();\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n\r\nexport function ChatProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [conversation, setConversation] = useState(null);\r\n  const [contactsList, setContactsList] = useState(null);\r\n  const [currConversation, setCurrConversation] = useState(\"\");\r\n  const [theirLiveText, setTheirLiveText] = useState(\"\");\r\n  // let history = useHistory();\r\n\r\n  const createContactsList = (contactsArray) => {\r\n    const startingList = contactsArray.map((contact) => {\r\n      const contObj = {\r\n        _id: contact._id,\r\n        username: contact.username,\r\n        isLive: false,\r\n        isOnline: false,\r\n        roomId: \"\",\r\n      };\r\n      return contObj;\r\n    });\r\n    setContactsList(startingList);\r\n  };\r\n\r\n  const updateOnlineStatus = (userData) => {\r\n    console.log(\r\n      `Online status for user ${userData.userId}: ${userData.isOnline}`\r\n    );\r\n    if (contactsList) {\r\n      const updatedList = contactsList.map((contact) => {\r\n        if (contact._id === userData.userId) {\r\n          const isOnline = userData.isOnline;\r\n          const updatedContact = {\r\n            ...contact,\r\n            isOnline,\r\n          };\r\n          return updatedContact;\r\n        }\r\n        return contact;\r\n      });\r\n\r\n      setContactsList(updatedList);\r\n    }\r\n  };\r\n\r\n  const updateLiveStatus = (userData, live) => {\r\n    // console.log(`Live status for user ${userData.id}: ${userData.isLive}`);\r\n    const updatedList = contactsList.map((contact) => {\r\n      if (contact._id === userData.userId) {\r\n        const liveStatus = live ? true : false;\r\n        const updatedContact = {\r\n          ...contact,\r\n          isLive: liveStatus,\r\n          isOnline: true,\r\n          roomId: userData.roomId,\r\n        };\r\n        console.log(`contact live status ${liveStatus}`);\r\n        return updatedContact;\r\n      }\r\n      return contact;\r\n    });\r\n    setContactsList(updatedList);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   fetch(process.env.REACT_APP_PORT_SERVER, {\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + this.props.token,\r\n  //     },\r\n  //   })\r\n  //     .then((res) => res.json())\r\n  //     .then((res) => {\r\n  //       if (res.authenticated === false) {\r\n  //         console.log(\"Start session to enter chat.\");\r\n  //         history.push(\"/\");\r\n  //       } else {\r\n  //         setUser(res.user);\r\n  //         createContactsList(res.user.connections);\r\n  //         console.log(\r\n  //           `User ${res.user.username} has been correctly authenticated.`\r\n  //         );\r\n  //         history.push(\"/chat\");\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => console.log(err));\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (!user) {\r\n  //     fetch(process.env.REACT_APP_PORT_SERVER, {\r\n  //       credentials: \"include\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //       \"Access-Control-Allow-Origin\": process.env.REACT_APP_PORT_SERVER,\r\n  //     })\r\n  //       .then((res) => res.json())\r\n  //       .then((res) => {\r\n  //         if (res.authenticated === false) {\r\n  //           console.log(\"Start session to enter chat.\");\r\n  //           history.push(\"/\");\r\n  //         } else {\r\n  //           setUser(res.user);\r\n  //           createContactsList(res.user.connections);\r\n  //           console.log(\r\n  //             `User ${res.user.username} has been correctly authenticated.`\r\n  //           );\r\n  //           history.push(\"/chat\");\r\n  //         }\r\n  //       })\r\n  //       .catch((err) => console.log(err));\r\n  //   }\r\n  // }, []);\r\n\r\n  const values = {\r\n    user,\r\n    setUser,\r\n    conversation,\r\n    setConversation,\r\n    contactsList,\r\n    createContactsList,\r\n    updateOnlineStatus,\r\n    updateLiveStatus,\r\n    currConversation,\r\n    setCurrConversation,\r\n    theirLiveText,\r\n    setTheirLiveText,\r\n  };\r\n\r\n  return <ChatContext.Provider value={values}>{children}</ChatContext.Provider>;\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\AuthContext.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\AppProviders.js",[],{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":62,"column":6,"nodeType":"82","endLine":62,"endColumn":8,"suggestions":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"76","severity":1,"message":"88","line":17,"column":5,"nodeType":"78","messageId":"79","endLine":17,"endColumn":21},{"ruleId":"80","severity":1,"message":"89","line":95,"column":6,"nodeType":"82","endLine":95,"endColumn":14,"suggestions":"90"},{"ruleId":"80","severity":1,"message":"91","line":20,"column":6,"nodeType":"82","endLine":20,"endColumn":42,"suggestions":"92"},{"ruleId":"76","severity":1,"message":"93","line":5,"column":17,"nodeType":"78","messageId":"79","endLine":5,"endColumn":24},{"ruleId":"76","severity":1,"message":"94","line":1,"column":35,"nodeType":"78","messageId":"79","endLine":1,"endColumn":44},{"ruleId":"76","severity":1,"message":"95","line":8,"column":11,"nodeType":"78","messageId":"79","endLine":8,"endColumn":15},{"ruleId":"76","severity":1,"message":"96","line":14,"column":10,"nodeType":"78","messageId":"79","endLine":14,"endColumn":24},{"ruleId":"76","severity":1,"message":"97","line":96,"column":9,"nodeType":"78","messageId":"79","endLine":96,"endColumn":21},{"ruleId":"76","severity":1,"message":"98","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":20},{"ruleId":"99","severity":2,"message":"100","line":133,"column":18,"nodeType":"78","messageId":"101","endLine":133,"endColumn":25},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'asyncStart', 'history', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["102"],"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"'currConversation' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientIsRecipient', 'isContact', 'setConversation', 'setTheirLiveText', 'theirLiveText', 'updateLiveStatus', 'updateOnlineStatus', and 'user'. Either include them or remove the dependency array.",["105"],"React Hook useEffect has a duplicate dependency: 'currConversation'. Either omit it or remove the dependency array.",["106"],"'setUser' is assigned a value but never used.","'useEffect' is defined but never used.","'user' is assigned a value but never used.","'showEmailInput' is assigned a value but never used.","'registerUser' is assigned a value but never used.","'useHistory' is defined but never used.","no-restricted-globals","Unexpected use of 'history'.","defaultMessage",{"desc":"107","fix":"108"},"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [asyncStart, history, user]",{"range":"113","text":"114"},"Update the dependencies array to be: [clientIsRecipient, isContact, setConversation, setTheirLiveText, socket, theirLiveText, updateLiveStatus, updateOnlineStatus, user]",{"range":"115","text":"116"},"Update the dependencies array to be: [currConversation]",{"range":"117","text":"118"},[1804,1806],"[asyncStart, history, user]",[2669,2677],"[clientIsRecipient, isContact, setConversation, setTheirLiveText, socket, theirLiveText, updateLiveStatus, updateOnlineStatus, user]",[564,600],"[currConversation]"]