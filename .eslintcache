[{"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\index.js":"1","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\App.js":"3","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Chat.js":"4","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Register.js":"5","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\LogIn.js":"6","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\UserContext.js":"7"},{"size":589,"mtime":1607349824713,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":1604,"mtime":1608135169195,"results":"11","hashOfConfig":"9"},{"size":6190,"mtime":1607964708661,"results":"12","hashOfConfig":"9"},{"size":1541,"mtime":1608131231146,"results":"13","hashOfConfig":"9"},{"size":1144,"mtime":1608131197865,"results":"14","hashOfConfig":"9"},{"size":91,"mtime":1607950368415,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1z0ticp",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\index.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\App.js",["32","33","34","35"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Chat.js",["36"],"import React, { useState, useRef, useEffect, useContext } from \"react\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport { UserContext } from \"../Context/UserContext\";\r\n\r\nexport default function Chat(props) {\r\n  const { user, setUser } = useContext(UserContext);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentConversation, setCurrentConversation] = useState([]);\r\n  const [recipientId, setRecipientId] = useState(\"\");\r\n  const addContactForm = useRef();\r\n  const chatLog = useRef();\r\n  const chatBottom = useRef();\r\n  const messageRef = useRef();\r\n  const [chatHeight, setChatHeight] = useState(\"\");\r\n  //   const [deletedMessage, setDeletedMessage] = useState();\r\n\r\n  const scrollToBottom = () => {\r\n    chatBottom.current.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // setInterval(() => {\r\n    fetch(\"http://localhost:4000/user/\" + props.userId)\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setUser(res);\r\n        setContacts(res.contacts);\r\n      });\r\n    // console.log(user.contacts);\r\n    fetch(\"http://localhost:4000/messages/\" + props.userId)\r\n      .then((res) => res.json())\r\n      .then((res) => setMessages(res));\r\n    // }, 1000);\r\n    let windowHeight = window.innerHeight;\r\n    setChatHeight(`${windowHeight - 180}px`);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(contacts);\r\n  }, [contacts]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const openConversation = (recipient) => {\r\n    console.log(recipient.name, recipient._id);\r\n\r\n    setRecipientId(recipient._id);\r\n    const getMessage = (item) => {\r\n      if (item.senderId === user._id && item.recipientId === recipient._id) {\r\n        return true;\r\n      } else if (\r\n        item.senderId === recipient._id &&\r\n        item.recipientId === user._id\r\n      ) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    };\r\n    const conversationMessages = messages.filter(getMessage);\r\n    setCurrentConversation(conversationMessages);\r\n  };\r\n\r\n  const handleMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!messageRef.current[\"message\"].value) {\r\n      return;\r\n    }\r\n    const data = {\r\n      senderId: props.userId,\r\n      recipientId: recipientId,\r\n      message: messageRef.current[\"message\"].value,\r\n      // roomId: JSON.stringify(roomId),\r\n    };\r\n\r\n    fetch(\"http://localhost:4000/messages/\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) =>\r\n        setCurrentConversation((prev) => {\r\n          console.log(res);\r\n          return [...prev, res];\r\n        })\r\n      );\r\n\r\n    messageRef.current[\"message\"].value = \"\";\r\n  };\r\n\r\n  const deleteMessage = (m, index) => {\r\n    fetch(\"http://localhost:4000/messages\", {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(m),\r\n    });\r\n\r\n    chatLog.current.children[index].classList.add(\"hidden\");\r\n  };\r\n\r\n  const handleContactAdd = (e) => {\r\n    e.preventDefault();\r\n\r\n    const userExists = props.usersList.find(\r\n      (user) => user.name === addContactForm.current[\"username\"].value\r\n    );\r\n\r\n    // console.log(props.usersList);\r\n\r\n    // console.log(userExists._id);\r\n\r\n    // const contactExists = contacts.find((contact) => contact.name === name);\r\n\r\n    // console.log(contacts);\r\n\r\n    if (userExists) {\r\n      fetch(\"http://localhost:4000/contacts/\" + user.name + \"/\" + user._id, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(userExists),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => setContacts(res.contacts));\r\n      // openConversation(newContact);\r\n    } else {\r\n      alert(`User doesn't exist`);\r\n    }\r\n  };\r\n\r\n  const deleteContact = (c) => {\r\n    fetch(\"http://localhost:4000/contacts/\" + user._id, {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(c),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => setContacts(res.value.contacts));\r\n    // .catch((error) => {\r\n    //   console.error(\"Error:\", error);\r\n    // });\r\n    // console.log(c);\r\n    // const index = usersList.indexOf(user);\r\n    // setUsersList((prev) => prev.slice(index, 1));\r\n  };\r\n\r\n  return (\r\n    <div className=\"Chat\">\r\n      <div className=\"conversations\">\r\n        {contacts.map((c) => (\r\n          <div className=\"contact\">\r\n            <button onClick={() => openConversation(c)}>{c.name}</button>\r\n            <button\r\n              className=\"delete-user-button\"\r\n              onClick={() => deleteContact(c)}\r\n            >\r\n              x\r\n            </button>\r\n          </div>\r\n        ))}\r\n        <form\r\n          className=\"add-contact\"\r\n          ref={addContactForm}\r\n          onSubmit={handleContactAdd}\r\n        >\r\n          <input name=\"username\" type=\"text\" placeholder=\"Username\"></input>\r\n          <button>Add</button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"chat-log\" style={{ height: chatHeight }} ref={chatLog}>\r\n        {currentConversation.map((m, index) => (\r\n          <div\r\n            id={index}\r\n            className={\r\n              user._id === m.senderId ? \"my-message-line\" : \"their-message-line\"\r\n            }\r\n          >\r\n            <div\r\n              className={\r\n                user._id === m.senderId ? \"my-message\" : \"their-message\"\r\n              }\r\n              onClick={() => deleteMessage(m, index)}\r\n            >\r\n              {m.message}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div ref={chatBottom}></div>\r\n      </div>\r\n      <form id=\"message-form\" ref={messageRef} onSubmit={handleMessage}>\r\n        <input\r\n          name=\"message\"\r\n          type=\"text\"\r\n          placeholder=\"Gotta xat fast\"\r\n          autoComplete=\"off\"\r\n        ></input>\r\n        <button type=\"submit\" className=\"material-icons\">\r\n          flash_on\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n",["37","38"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Register.js",["39","40"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\LogIn.js",["41","42"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\UserContext.js",[],{"ruleId":"43","severity":1,"message":"44","line":1,"column":38,"nodeType":"45","messageId":"46","endLine":1,"endColumn":44},{"ruleId":"43","severity":1,"message":"47","line":2,"column":10,"nodeType":"45","messageId":"46","endLine":2,"endColumn":18},{"ruleId":"43","severity":1,"message":"48","line":2,"column":33,"nodeType":"45","messageId":"46","endLine":2,"endColumn":42},{"ruleId":"43","severity":1,"message":"49","line":4,"column":8,"nodeType":"45","messageId":"46","endLine":4,"endColumn":12},{"ruleId":"50","severity":1,"message":"51","line":38,"column":6,"nodeType":"52","endLine":38,"endColumn":8,"suggestions":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"43","severity":1,"message":"58","line":6,"column":11,"nodeType":"45","messageId":"46","endLine":6,"endColumn":15},{"ruleId":"43","severity":1,"message":"59","line":6,"column":17,"nodeType":"45","messageId":"46","endLine":6,"endColumn":24},{"ruleId":"43","severity":1,"message":"58","line":5,"column":11,"nodeType":"45","messageId":"46","endLine":5,"endColumn":15},{"ruleId":"43","severity":1,"message":"59","line":5,"column":17,"nodeType":"45","messageId":"46","endLine":5,"endColumn":24},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'useParams' is defined but never used.","'Chat' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.userId' and 'setUser'. Either include them or remove the dependency array.","ArrayExpression",["60"],"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"'user' is assigned a value but never used.","'setUser' is assigned a value but never used.",{"desc":"63","fix":"64"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [props.userId, setUser]",{"range":"65","text":"66"},[1413,1415],"[props.userId, setUser]"]