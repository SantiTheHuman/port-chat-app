[{"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\index.js":"1","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\App.js":"3","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Chat.js":"4","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Register.js":"5","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\LogIn.js":"6","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SessionContext.js":"7","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\NavBar.js":"8","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Connections.js":"9","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\AddConnection.js":"10","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SocketProvider.js":"11"},{"size":308,"mtime":1608628595606,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":833,"mtime":1608743683211,"results":"16","hashOfConfig":"13"},{"size":4389,"mtime":1608748966493,"results":"17","hashOfConfig":"13"},{"size":2101,"mtime":1608748874238,"results":"18","hashOfConfig":"13"},{"size":1720,"mtime":1608748993421,"results":"19","hashOfConfig":"13"},{"size":1252,"mtime":1608749022641,"results":"20","hashOfConfig":"13"},{"size":1200,"mtime":1608749004424,"results":"21","hashOfConfig":"13"},{"size":2377,"mtime":1608748975365,"results":"22","hashOfConfig":"13"},{"size":1608,"mtime":1608748922892,"results":"23","hashOfConfig":"13"},{"size":585,"mtime":1608743297987,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"11eq017",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1z0ticp",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"27"},"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\index.js",[],["54","55"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\reportWebVitals.js",[],["56","57"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\App.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Chat.js",["58","59"],"import React, { useState, useRef, useEffect, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport { useSession } from \"../Context/SessionContext\";\r\nimport { useSocket } from \"../Context/SocketProvider\";\r\n\r\nconst {\r\n  REACT_APP_API_URL = \"https://port-contact-server.herokuapp.com\",\r\n} = process.env;\r\n\r\nexport default function Chat(props) {\r\n  const history = useHistory();\r\n  const { user, setUser, conversation, setConversation } = useSession();\r\n  const chatLog = useRef();\r\n  const chatBottom = useRef();\r\n  const messageRef = useRef();\r\n  const [chatHeight, setChatHeight] = useState(\"\");\r\n  const socket = useSocket();\r\n\r\n  socket.on(\"new message\", function (newMessage) {\r\n    setConversation(\r\n      setConversation((prev) => {\r\n        conversation.messages = [...prev.messages, newMessage];\r\n      })\r\n    );\r\n  });\r\n\r\n  const scrollToBottom = () => {\r\n    if (chatBottom.current) {\r\n      chatBottom.current.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      fetch(REACT_APP_API_URL + \"/\", {\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        \"Access-Control-Allow-Origin\":\r\n          \"https://port-contact-server.herokuapp.com\",\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.authenticated === false) {\r\n            console.log(\"Start session to enter chat.\");\r\n            history.push(\"/\");\r\n          } else {\r\n            console.log(`Authorized user: ${res.user}`);\r\n            setUser(res.user);\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let windowHeight = window.innerHeight;\r\n    setChatHeight(`${windowHeight - 180}px`);\r\n    scrollToBottom();\r\n  }, [conversation]);\r\n\r\n  const handleMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!messageRef.current[\"message\"].value) {\r\n      return;\r\n    }\r\n\r\n    const messageData = {\r\n      senderId: user._id,\r\n      recipientId: conversation.connection._id,\r\n      content: messageRef.current[\"message\"].value,\r\n    };\r\n\r\n    socket.emit(\"new message\", messageData);\r\n\r\n    // fetch(REACT_APP_API_URL + \"/messages/\" + conversation.connection._id, {\r\n    //   method: \"POST\",\r\n    //   headers: { \"Content-Type\": \"application/json\" },\r\n    //   body: JSON.stringify(messageData),\r\n    // })\r\n    //   .then((res) => res.json())\r\n    //   .then((res) =>\r\n    //     setConversation((prev) => {\r\n    //       conversation.messages = [...prev.messages, res.newMessage];\r\n    //     })\r\n    //   );\r\n\r\n    messageRef.current[\"message\"].value = \"\";\r\n  };\r\n\r\n  const deleteMessage = (m, index) => {\r\n    fetch(REACT_APP_API_URL + \"/messages\", {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(m),\r\n    });\r\n\r\n    chatLog.current.children[index].classList.add(\"hidden\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {user && (\r\n        <div className=\"Chat\">\r\n          <div\r\n            className=\"chat-log\"\r\n            style={{ height: chatHeight }}\r\n            ref={chatLog}\r\n          >\r\n            {conversation &&\r\n              conversation.messages.map((m, index) => (\r\n                <div\r\n                  id={index}\r\n                  className={\r\n                    user._id === m.senderId\r\n                      ? \"my-message-line\"\r\n                      : \"their-message-line\"\r\n                  }\r\n                >\r\n                  <div\r\n                    className={\r\n                      user._id === m.senderId ? \"my-message\" : \"their-message\"\r\n                    }\r\n                    onClick={() => deleteMessage(m, index)}\r\n                  >\r\n                    {m.content}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            <div ref={chatBottom}></div>\r\n          </div>\r\n\r\n          <form onSubmit={handleMessage} id=\"message-form\" ref={messageRef}>\r\n            <input\r\n              name=\"message\"\r\n              type=\"text\"\r\n              placeholder=\"Gotta xat fast\"\r\n              autoComplete=\"off\"\r\n            ></input>\r\n            <button type=\"submit\" className=\"material-icons\">\r\n              flash_on\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Register.js",["60"],"import React, { useRef, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSession } from \"../Context/SessionContext\";\r\n\r\nexport default function Register() {\r\n  let history = useHistory();\r\n  const registerFormRef = useRef();\r\n  const { setUser } = useSession();\r\n  // const { auth, setAuth } = useContext(AuthContext);\r\n\r\n  // HTML FORM SEND\r\n  // <Form action=\"/subdomain\" method=\"post\">\r\n  // <input type=\"text\" name=\"username\"/>\r\n\r\n  const registerNewUser = (e) => {\r\n    e.preventDefault();\r\n    //Check all fields are correctly filled out\r\n\r\n    const userData = {\r\n      username: registerFormRef.current[\"username\"].value,\r\n      email: registerFormRef.current[\"email\"].value,\r\n      password: registerFormRef.current[\"password\"].value,\r\n    };\r\n\r\n    console.log(userData);\r\n\r\n    fetch(\"https://port-contact-server.herokuapp.com/register\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      \"Access-Control-Allow-Origin\":\r\n        \"https://port-contact-server.herokuapp.com\",\r\n      credentials: \"include\",\r\n      body: JSON.stringify(userData),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.success === true) {\r\n          setUser(res.user);\r\n          history.push(\"/chat\");\r\n        } else {\r\n          console.log(res.message);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    registerFormRef.current.reset();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"register-form\"\r\n      ref={registerFormRef}\r\n      onSubmit={registerNewUser}\r\n    >\r\n      <h2>New user</h2>\r\n      <div>\r\n        port.contact/\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          placeholder=\"Username\"\r\n          required\r\n        ></input>\r\n      </div>\r\n\r\n      <input type=\"email\" name=\"email\" placeholder=\"E-mail\" required></input>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        placeholder=\"Password\"\r\n        required\r\n      ></input>\r\n      <button type=\"submit\">Create</button>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\LogIn.js",["61"],"import React, { useRef, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useSession } from \"../Context/SessionContext\";\r\n\r\nexport default function LogIn() {\r\n  const { setUser } = useSession();\r\n  // const { auth, setAuth } = useContext(AuthContext);\r\n  const logInFormRef = useRef();\r\n  const history = useHistory();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    //Check all fields are correctly filled out\r\n\r\n    const loginData = {\r\n      username: logInFormRef.current[\"username\"].value,\r\n      password: logInFormRef.current[\"password\"].value,\r\n    };\r\n    console.log(loginData);\r\n\r\n    fetch(\"https://port-contact-server.herokuapp.com/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(loginData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      \"Access-Control-Allow-Origin\":\r\n        \"https://port-contact-server.herokuapp.com\",\r\n      credentials: \"include\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.success === true) {\r\n          console.log(res.user);\r\n          // console.log(`Logged in user: ${res.user}`);\r\n          setUser(res.user);\r\n          history.push(\"/chat\");\r\n        } else {\r\n          console.log(res.message);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    logInFormRef.current.reset();\r\n  };\r\n\r\n  return (\r\n    <form className=\"login-form\" ref={logInFormRef} onSubmit={handleLogin}>\r\n      <h2>Login</h2>\r\n      <input type=\"text\" name=\"username\" placeholder=\"Username\"></input>\r\n      <input type=\"password\" name=\"password\" placeholder=\"Password\"></input>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SessionContext.js",["62"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst SessionContext = React.createContext();\r\n\r\nexport function useSession() {\r\n  return useContext(SessionContext);\r\n}\r\n\r\nexport function SessionProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [conversation, setConversation] = useState({\r\n    connection: {},\r\n    messages: [],\r\n  });\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      fetch(\"https://port-contact-server.herokuapp.com\", {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        \"Access-Control-Allow-Origin\":\r\n          \"https://port-contact-server.herokuapp.com\",\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.success === true) {\r\n            console.log(res.user);\r\n            setUser(res.user);\r\n            history.push(\"/chat\");\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, []);\r\n\r\n  const values = { user, setUser, conversation, setConversation };\r\n\r\n  return (\r\n    <SessionContext.Provider value={values}>{children}</SessionContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\NavBar.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Connections.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\AddConnection.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SocketProvider.js",["63","64","65"],"import io from \"socket.io-client\";\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { useSession } from \"../Context/SessionContext\";\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ children }) {\r\n  // const [socket, setSocket] = useState();\r\n\r\n  //   const { user, setUser, conversation, setConversation } = useSession();\r\n\r\n  const socket = io();\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":46,"nodeType":"74","messageId":"75","endLine":1,"endColumn":56},{"ruleId":"76","severity":1,"message":"77","line":56,"column":6,"nodeType":"78","endLine":56,"endColumn":8,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":25,"nodeType":"74","messageId":"75","endLine":1,"endColumn":35},{"ruleId":"72","severity":1,"message":"73","line":1,"column":25,"nodeType":"74","messageId":"75","endLine":1,"endColumn":35},{"ruleId":"76","severity":1,"message":"80","line":37,"column":6,"nodeType":"78","endLine":37,"endColumn":8,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"82","line":2,"column":29,"nodeType":"74","messageId":"75","endLine":2,"endColumn":37},{"ruleId":"72","severity":1,"message":"83","line":2,"column":39,"nodeType":"74","messageId":"75","endLine":2,"endColumn":48},{"ruleId":"72","severity":1,"message":"84","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":20},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],["85"],["86"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'setUser', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.",["88"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'useSession' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},"Update the dependencies array to be: [history, setUser, user]",{"range":"93","text":"94"},"Update the dependencies array to be: [history, user]",{"range":"95","text":"96"},[1727,1729],"[history, setUser, user]",[1071,1073],"[history, user]"]