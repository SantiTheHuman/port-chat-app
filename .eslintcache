[{"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\index.js":"1","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\reportWebVitals.js":"2","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\App.js":"3","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Chat.js":"4","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Register.js":"5","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\LogIn.js":"6","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SessionContext.js":"7","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\NavBar.js":"8","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\AddConnection.js":"9","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SocketContext.js":"10","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Contacts.js":"11"},{"size":308,"mtime":1608628595606,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":742,"mtime":1609433818502,"results":"15","hashOfConfig":"13"},{"size":4542,"mtime":1609450751695,"results":"16","hashOfConfig":"13"},{"size":6240,"mtime":1609450751700,"results":"17","hashOfConfig":"13"},{"size":2248,"mtime":1609448217440,"results":"18","hashOfConfig":"13"},{"size":4155,"mtime":1609448295750,"results":"19","hashOfConfig":"13"},{"size":1929,"mtime":1609450751695,"results":"20","hashOfConfig":"13"},{"size":2961,"mtime":1609448341886,"results":"21","hashOfConfig":"13"},{"size":2935,"mtime":1609448295750,"results":"22","hashOfConfig":"13"},{"size":3309,"mtime":1609450751700,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1z0ticp",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\index.js",[],["52","53"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\reportWebVitals.js",[],["54","55"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\App.js",["56"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Chat.js",["57","58"],"import React, { useState, useRef, useEffect, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport { useSession } from \"../Context/SessionContext\";\r\nimport { useSocket } from \"../Context/SocketContext\";\r\n\r\nconst {\r\n  PORT_CONTACT_SERVER = \"https://port-contact-server.herokuapp.com\",\r\n} = process.env;\r\n\r\nexport default function Chat(props) {\r\n  const history = useHistory();\r\n  const {\r\n    user,\r\n    setUser,\r\n    createContactsList,\r\n    conversation,\r\n    setConversation,\r\n    currConversation,\r\n  } = useSession();\r\n  // const chatLog = useRef();\r\n  const chatBottom = useRef();\r\n  const messageRef = useRef();\r\n  const [chatHeight, setChatHeight] = useState(\"\");\r\n  const { socket, startSocketConnection } = useSocket();\r\n\r\n  const scrollToBottom = () => {\r\n    if (chatBottom.current) {\r\n      chatBottom.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  const asyncStart = async (userObj) => {\r\n    await setUser(userObj);\r\n    await createContactsList(userObj.connections);\r\n    startSocketConnection(userObj);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!user) {\r\n      fetch(PORT_CONTACT_SERVER, {\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.authenticated === false) {\r\n            console.log(\"Start session to enter chat.\");\r\n            history.push(\"/\");\r\n          } else {\r\n            asyncStart(res.user);\r\n\r\n            console.log(\r\n              `User ${res.user.username} has been correctly authenticated.`\r\n            );\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n    // else if (user && !socket) {\r\n    //   console.log(\r\n    //     `User ${user.username} remains authenticated from previous visit.`\r\n    //   );\r\n    //   startSocketConnection(user);\r\n    // } else if (!user) {\r\n    //   history.push(\"/\");\r\n    // }\r\n\r\n    let windowHeight = window.innerHeight;\r\n    setChatHeight(`${windowHeight}px`);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [conversation, setConversation]);\r\n\r\n  const handleMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!messageRef.current[\"message\"].value) {\r\n      return;\r\n    }\r\n\r\n    const messageData = {\r\n      senderId: user._id,\r\n      recipientId: currConversation._id,\r\n      content: messageRef.current[\"message\"].value,\r\n    };\r\n\r\n    const roomId = currConversation.roomId;\r\n\r\n    socket.emit(\"message\", messageData, roomId);\r\n\r\n    messageRef.current[\"message\"].value = \"\";\r\n\r\n    // fetch(PORT_CONTACT_SERVER + \"/messages/\" + conversation.connection._id, {\r\n    //   method: \"POST\",\r\n    //   headers: { \"Content-Type\": \"application/json\" },\r\n    //   body: JSON.stringify(messageData),\r\n    // })\r\n    //   .then((res) => res.json())\r\n    //   .then((res) =>\r\n    //     setConversation((prev) => {\r\n    //       conversation.messages = [...prev.messages, res.newMessage];\r\n    //     })\r\n    //   );\r\n  };\r\n\r\n  // const deleteMessage = (m, index) => {\r\n  //   fetch(PORT_CONTACT_SERVER + \"/messages\", {\r\n  //     method: \"DELETE\",\r\n  //     headers: { \"Content-Type\": \"application/json\" },\r\n  //     body: JSON.stringify(m),\r\n  //   });\r\n\r\n  // chatLog.current.children[index].classList.add(\"hidden\");\r\n  // };\r\n\r\n  return (\r\n    <div className=\"Chat\" style={{ height: chatHeight }}>\r\n      <div ref={chatBottom}></div>\r\n\r\n      {conversation && (\r\n        <ul className=\"chat-log\">\r\n          <div className=\"chat-bottom\"></div>\r\n          {conversation.map((m, index) => (\r\n            <li\r\n              key={index}\r\n              className={\r\n                user._id === m.senderId\r\n                  ? \"my-message-line\"\r\n                  : \"their-message-line\"\r\n              }\r\n            >\r\n              <div\r\n                className={\r\n                  user._id === m.senderId ? \"my-message\" : \"their-message\"\r\n                }\r\n              >\r\n                {m.content}\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <form onSubmit={handleMessage} className=\"message-form\" ref={messageRef}>\r\n        <input\r\n          className=\"message-input\"\r\n          name=\"message\"\r\n          autoComplete=\"off\"\r\n        ></input>\r\n      </form>\r\n\r\n      {/* <button type=\"submit\" className=\"material-icons\">\r\n          flash_on\r\n        </button> */}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Register.js",["59","60"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSession } from \"../Context/SessionContext\";\r\nimport { useSocket } from \"../Context/SocketContext\";\r\n\r\nexport default function Register() {\r\n  let history = useHistory();\r\n  const { user, setUser, createContactsList } = useSession();\r\n  const { startSocketConnection } = useSocket();\r\n  const usernameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const [showUsernameInput, setShowUsernameInput] = useState(true);\r\n  const [showEmailInput, setShowEmailInput] = useState(false);\r\n  const [showPasswordInput, setShowPasswordInput] = useState(false);\r\n  const [userExists, setUserExists] = useState(false);\r\n  const [usernameInput, setUsernameInput] = useState(\"\");\r\n  const [passwordInput, setPasswordInput] = useState(\"\");\r\n  // const [emailInput, setEmailInput] = useState(\"\");\r\n\r\n  // HTML FORM SEND\r\n  // <Form action=\"/subdomain\" method=\"post\">\r\n  // <input type=\"text\" name=\"username\"/>\r\n\r\n  const asyncStart = async (userObj) => {\r\n    await setUser(userObj);\r\n    await createContactsList(userObj.connections);\r\n    await startSocketConnection(userObj);\r\n    history.push(\"/chat\");\r\n  };\r\n\r\n  const storeUsername = (e) => {\r\n    e.preventDefault();\r\n    //Check all fields are correctly filled out\r\n    const username = usernameRef.current[\"username\"].value;\r\n\r\n    setUsernameInput(username);\r\n\r\n    // console.log(usernameInput);\r\n\r\n    fetch(\"https://port-contact-server.herokuapp.com/login/username\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n      credentials: \"include\",\r\n      body: JSON.stringify({ username: username }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(username, res.success);\r\n        if (res.success === true) {\r\n          setUserExists(true);\r\n          setShowUsernameInput(false);\r\n          setShowPasswordInput(true);\r\n        } else {\r\n          setUserExists(false);\r\n          setShowUsernameInput(false);\r\n          setShowPasswordInput(true);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const storePassword = () => {\r\n    setPasswordInput(passwordRef.current[\"password\"].value);\r\n    setShowPasswordInput(false);\r\n    setShowEmailInput(true);\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    // console.log(userExists);\r\n    if (userExists) {\r\n      const loginData = {\r\n        username: usernameInput,\r\n        password: passwordRef.current[\"password\"].value,\r\n      };\r\n      // console.log(loginData);\r\n\r\n      fetch(\"https://port-contact-server.herokuapp.com/login\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(loginData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n        credentials: \"include\",\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.success === true) {\r\n            asyncStart(res.user);\r\n            // console.log(res.user);\r\n            // console.log(`Logged in user: ${res.user.username}`);\r\n            // startSocketConnection(res.user);\r\n            // history.push(\"/chat\");\r\n          } else {\r\n            console.log(res.message);\r\n            // history.push(\"/chat\");\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      storePassword();\r\n    }\r\n  };\r\n\r\n  const registerUser = (e) => {\r\n    e.preventDefault();\r\n    const registerData = {\r\n      username: usernameInput,\r\n      password: passwordInput,\r\n      email: emailRef.current[\"email\"].value,\r\n    };\r\n    fetch(\"https://port-contact-server.herokuapp.com/register\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      \"Access-Control-Allow-Origin\": \"http://port.contact/\",\r\n      credentials: \"include\",\r\n      body: JSON.stringify(registerData),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (res.success === true) {\r\n          asyncStart(res.user);\r\n        } else {\r\n          console.log(res.message);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        debugger;\r\n      });\r\n  };\r\n\r\n  const goBack = () => {\r\n    if (showPasswordInput) {\r\n      setShowPasswordInput(false);\r\n      setShowUsernameInput(true);\r\n    } else {\r\n      setShowEmailInput(false);\r\n      setShowPasswordInput(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-area\">\r\n      <form\r\n        ref={usernameRef}\r\n        className={`login-input ${\r\n          showUsernameInput ? \"show-login-input\" : \"hide-login-input\"\r\n        }`}\r\n        onSubmit={storeUsername}\r\n      >\r\n        <input name=\"username\" required></input>\r\n        <p>username</p>\r\n      </form>\r\n\r\n      <form\r\n        ref={passwordRef}\r\n        className={`login-input later-input ${\r\n          showPasswordInput ? \"show-login-input\" : \"hide-login-input\"\r\n        }`}\r\n        onSubmit={handleLogin}\r\n      >\r\n        <p className=\"go-back\" onClick={goBack}>\r\n          {\"<\"}\r\n        </p>\r\n        <input type=\"password\" name=\"password\" required></input>\r\n        <p>password</p>\r\n      </form>\r\n\r\n      <form\r\n        ref={emailRef}\r\n        className={`login-input later-input ${\r\n          showEmailInput ? \"show-login-input\" : \"hide-login-input\"\r\n        }`}\r\n        onSubmit={registerUser}\r\n      >\r\n        <p className=\"go-back\" onClick={goBack}>\r\n          {\"<\"}\r\n        </p>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          // required\r\n        ></input>\r\n        <p>email</p>\r\n      </form>\r\n    </div>\r\n    /* <div>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          placeholder=\"Username\"\r\n          required\r\n        ></input>\r\n      </div>\r\n\r\n      <input type=\"email\" name=\"email\" placeholder=\"E-mail\" required></input>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        placeholder=\"Password\"\r\n        required\r\n      ></input>\r\n      <button type=\"submit\">Create</button> */\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\LogIn.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SessionContext.js",["61","62","63"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst { PORT_CONTACT_SERVER = \"http://localhost:4000\" } = process.env;\r\n\r\nconst SessionContext = React.createContext();\r\n\r\nexport function useSession() {\r\n  return useContext(SessionContext);\r\n}\r\n\r\nexport function SessionProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [conversation, setConversation] = useState(null);\r\n  const [contactsList, setContactsList] = useState(null);\r\n  const [currConversation, setCurrConversation] = useState(\"\");\r\n  let history = useHistory();\r\n\r\n  const createContactsList = (contactsArray) => {\r\n    const startingList = contactsArray.map((contact) => {\r\n      const contObj = {\r\n        _id: contact._id,\r\n        username: contact.username,\r\n        isLive: false,\r\n        isOnline: false,\r\n        roomId: \"\",\r\n      };\r\n      return contObj;\r\n    });\r\n    setContactsList(startingList);\r\n  };\r\n\r\n  const updateOnlineStatus = (userData) => {\r\n    console.log(\r\n      `Online status for user ${userData.userId}: ${userData.isOnline}`\r\n    );\r\n    if (contactsList) {\r\n      const updatedList = contactsList.map((contact) => {\r\n        if (contact._id === userData.userId) {\r\n          const isOnline = userData.isOnline;\r\n          const updatedContact = {\r\n            ...contact,\r\n            isOnline,\r\n          };\r\n          return updatedContact;\r\n        }\r\n        return contact;\r\n      });\r\n\r\n      setContactsList(updatedList);\r\n    }\r\n  };\r\n\r\n  const updateLiveStatus = (userData, live) => {\r\n    // console.log(`Live status for user ${userData.id}: ${userData.isLive}`);\r\n    const updatedList = contactsList.map((contact) => {\r\n      if (contact._id === userData.userId) {\r\n        const liveStatus = live ? true : false;\r\n        const updatedContact = {\r\n          ...contact,\r\n          isLive: liveStatus,\r\n          isOnline: true,\r\n          roomId: userData.roomId,\r\n        };\r\n        console.log(`contact live status ${liveStatus}`);\r\n        return updatedContact;\r\n      }\r\n      return contact;\r\n    });\r\n    setContactsList(updatedList);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (!user) {\r\n  //     fetch(PORT_CONTACT_SERVER, {\r\n  //       credentials: \"include\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //       \"Access-Control-Allow-Origin\": \"https://port-contact-server.herokuapp.com/\",\r\n  //     })\r\n  //       .then((res) => res.json())\r\n  //       .then((res) => {\r\n  //         if (res.authenticated === false) {\r\n  //           console.log(\"Start session to enter chat.\");\r\n  //           history.push(\"/\");\r\n  //         } else {\r\n  //           setUser(res.user);\r\n  //           createContactsList(res.user.connections);\r\n  //           console.log(\r\n  //             `User ${res.user.username} has been correctly authenticated.`\r\n  //           );\r\n  //           history.push(\"/chat\");\r\n  //         }\r\n  //       })\r\n  //       .catch((err) => console.log(err));\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (!user) {\r\n  //     fetch(\"https://port-contact-server.herokuapp.com/\", {\r\n  //       method: \"GET\",\r\n  //       credentials: \"include\",\r\n  //       headers: { \"Content-Type\": \"application/json\" },\r\n  //       \"Access-Control-Allow-Origin\": \"https://port-contact-server.herokuapp.com/\",\r\n  //     })\r\n  //       .then((res) => res.json())\r\n  //       .then((res) => {\r\n  //         if (res.success === true) {\r\n  //           // console.log(res.user);\r\n  //           setUser(res.user);\r\n  //           createContactsList(res.user.connections);\r\n  //           return history.push(\"/chat\");\r\n  //         }\r\n  //       })\r\n  //       .catch((err) => console.log(err));\r\n  //   }\r\n  // }, []);\r\n\r\n  const values = {\r\n    user,\r\n    setUser,\r\n    conversation,\r\n    setConversation,\r\n    contactsList,\r\n    createContactsList,\r\n    updateOnlineStatus,\r\n    updateLiveStatus,\r\n    currConversation,\r\n    setCurrConversation,\r\n  };\r\n\r\n  return (\r\n    <SessionContext.Provider value={values}>{children}</SessionContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\NavBar.js",[],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\AddConnection.js",["64"],"C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Context\\SocketContext.js",["65"],"import { io } from \"socket.io-client\";\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { useSession } from \"./SessionContext\";\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ children }) {\r\n  const [socket, setSocket] = useState(null);\r\n  // const [contactNS, setContactNS] = useState(null);\r\n  const {\r\n    user,\r\n    contactsList,\r\n    // conversation,\r\n    setConversation,\r\n    updateOnlineStatus,\r\n    updateLiveStatus,\r\n    // currConversation,\r\n  } = useSession();\r\n\r\n  // useEffect(() => {\r\n  //   if (user) {\r\n  //     startSocketConnection(user);\r\n  //   }\r\n  // }, [user]);\r\n\r\n  const startSocketConnection = (userObj) => {\r\n    // console.log(`Connecting to socket http://localhost:4000`);\r\n    // const generalSocket = ;\r\n    setSocket(\r\n      io(`https://port-contact-server.herokuapp.com/chat`, {\r\n        query: userObj,\r\n        withCredentials: true,\r\n      })\r\n    );\r\n  };\r\n\r\n  const isContact = async (userData) => {\r\n    if (contactsList) {\r\n      const found = await contactsList.find(\r\n        (contact) => userData.userId === contact._id\r\n      );\r\n      return found ? true : false;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const clientIsRecipient = (userData) => {\r\n    const answer = userData.recipientId === user._id;\r\n    return answer;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket && user) {\r\n      socket.on(\"connect\", () => {\r\n        socket.emit(\"online status\", { userId: user._id, isOnline: true });\r\n        console.log(`Send status: ${user.username} is online.`);\r\n      });\r\n\r\n      socket.on(\"user status update\", (userData) => {\r\n        const userIsContact = isContact(userData);\r\n        if (userIsContact) {\r\n          updateOnlineStatus(userData);\r\n        }\r\n        socket.emit(\"user status back\", { userId: user._id, isOnline: true });\r\n      });\r\n\r\n      socket.on(\"user status back\", (userData) => {\r\n        const userIsContact = isContact(userData);\r\n        if (userIsContact) {\r\n          updateOnlineStatus(userData);\r\n        }\r\n      });\r\n\r\n      socket.on(\"user is live\", async (userData) => {\r\n        const userIsContact = await isContact(userData);\r\n        const isLive = clientIsRecipient(userData);\r\n        if (userIsContact) {\r\n          updateLiveStatus(userData, isLive);\r\n        }\r\n        console.log(userData);\r\n      });\r\n\r\n      socket.on(\"user logged out\", (userData) => {\r\n        updateOnlineStatus(userData);\r\n      });\r\n\r\n      socket.on(\"message\", (msg) => {\r\n        setConversation((prevConversation) => [msg, ...prevConversation]);\r\n        // console.log(msg);\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  const values = {\r\n    socket,\r\n    setSocket,\r\n    startSocketConnection,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={values}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\Port Connect App\\port-client\\src\\Components\\Contacts.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"66","replacedBy":"70"},{"ruleId":"68","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":7,"column":8,"nodeType":"74","messageId":"75","endLine":7,"endColumn":13},{"ruleId":"72","severity":1,"message":"76","line":1,"column":46,"nodeType":"74","messageId":"75","endLine":1,"endColumn":56},{"ruleId":"77","severity":1,"message":"78","line":74,"column":6,"nodeType":"79","endLine":74,"endColumn":8,"suggestions":"80"},{"ruleId":"72","severity":1,"message":"81","line":1,"column":35,"nodeType":"74","messageId":"75","endLine":1,"endColumn":44},{"ruleId":"72","severity":1,"message":"82","line":8,"column":11,"nodeType":"74","messageId":"75","endLine":8,"endColumn":15},{"ruleId":"72","severity":1,"message":"81","line":1,"column":39,"nodeType":"74","messageId":"75","endLine":1,"endColumn":48},{"ruleId":"72","severity":1,"message":"83","line":3,"column":9,"nodeType":"74","messageId":"75","endLine":3,"endColumn":28},{"ruleId":"72","severity":1,"message":"84","line":16,"column":7,"nodeType":"74","messageId":"75","endLine":16,"endColumn":14},{"ruleId":"72","severity":1,"message":"85","line":5,"column":17,"nodeType":"74","messageId":"75","endLine":5,"endColumn":24},{"ruleId":"77","severity":1,"message":"86","line":97,"column":6,"nodeType":"79","endLine":97,"endColumn":14,"suggestions":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],["88"],["89"],"no-unused-vars","'LogIn' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'asyncStart', 'history', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["90"],"'useEffect' is defined but never used.","'user' is assigned a value but never used.","'PORT_CONTACT_SERVER' is assigned a value but never used.","'history' is assigned a value but never used.","'setUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientIsRecipient', 'isContact', 'setConversation', 'updateLiveStatus', 'updateOnlineStatus', and 'user'. Either include them or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [asyncStart, history, user]",{"range":"96","text":"97"},"Update the dependencies array to be: [clientIsRecipient, isContact, setConversation, socket, updateLiveStatus, updateOnlineStatus, user]",{"range":"98","text":"99"},[2159,2161],"[asyncStart, history, user]",[2695,2703],"[clientIsRecipient, isContact, setConversation, socket, updateLiveStatus, updateOnlineStatus, user]"]