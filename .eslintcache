[{"C:\\Users\\User\\Projects\\chat-app\\client\\src\\index.js":"1","C:\\Users\\User\\Projects\\chat-app\\client\\src\\App.js":"2","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\NavBar.js":"3","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Chat.js":"4","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\SocketContext.js":"5","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Contacts.js":"6","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\AddConnection.js":"7","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\ChatContext.js":"8","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\AuthContext.js":"9","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\ContextProviders.js":"10","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\LogInScreen.js":"11","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\OptionsMenu.js":"12","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\ChangeUsername.js":"13","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\SaveAccount.js":"14","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\LogOut.js":"15","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\DeleteUser.js":"16"},{"size":385,"mtime":1611489944502,"results":"17","hashOfConfig":"18"},{"size":613,"mtime":1611489998274,"results":"19","hashOfConfig":"18"},{"size":334,"mtime":1612024768550,"results":"20","hashOfConfig":"18"},{"size":3148,"mtime":1612024750419,"results":"21","hashOfConfig":"18"},{"size":2912,"mtime":1611393656701,"results":"22","hashOfConfig":"18"},{"size":2207,"mtime":1611391645098,"results":"23","hashOfConfig":"18"},{"size":3219,"mtime":1611392426633,"results":"24","hashOfConfig":"18"},{"size":4151,"mtime":1611393980555,"results":"25","hashOfConfig":"18"},{"size":2496,"mtime":1613659958560,"results":"26","hashOfConfig":"18"},{"size":323,"mtime":1611394547676,"results":"27","hashOfConfig":"18"},{"size":2738,"mtime":1613653576055,"results":"28","hashOfConfig":"18"},{"size":3735,"mtime":1613661759564,"results":"29","hashOfConfig":"18"},{"size":2260,"mtime":1613573251569,"results":"30","hashOfConfig":"18"},{"size":2112,"mtime":1613661270475,"results":"31","hashOfConfig":"18"},{"size":645,"mtime":1613660384959,"results":"32","hashOfConfig":"18"},{"size":1500,"mtime":1613575520689,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1ej3mat",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Projects\\chat-app\\client\\src\\index.js",[],["71","72"],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\App.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\NavBar.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Chat.js",["73","74"],"import React, { useState, useRef, useEffect } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport { useAuth } from \"../Context/AuthContext\";\r\nimport { useChat } from \"../Context/ChatContext\";\r\nimport { useSocket } from \"../Context/SocketContext\";\r\n\r\nexport default function Chat(props) {\r\n  // const history = useHistory();\r\n  const {\r\n    createContactsList,\r\n    chatLog,\r\n    setChatLog,\r\n    currConversation,\r\n    theirLiveText,\r\n  } = useChat();\r\n  const { user } = useAuth();\r\n  const chatBottom = useRef();\r\n  const messageRef = useRef();\r\n  // const [chatHeight, setChatHeight] = useState(\"\");\r\n  const { socket, startSocketConnection } = useSocket();\r\n\r\n  const scrollToBottom = () => {\r\n    if (chatBottom.current) {\r\n      chatBottom.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    createContactsList(user.connections);\r\n    startSocketConnection(user);\r\n\r\n    // let windowHeight = window.innerHeight;\r\n    // setChatHeight(`${windowHeight}px`);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [chatLog, setChatLog]);\r\n\r\n  const handleMessage = (e) => {\r\n    e.preventDefault();\r\n    if (!messageRef.current[\"message\"].value) {\r\n      return;\r\n    }\r\n\r\n    const messageData = {\r\n      senderId: user._id,\r\n      recipientId: currConversation._id,\r\n      content: messageRef.current[\"message\"].value,\r\n    };\r\n\r\n    const roomId = currConversation.roomId;\r\n\r\n    socket.emit(\"message\", messageData, roomId);\r\n\r\n    messageRef.current[\"message\"].value = \"\";\r\n  };\r\n\r\n  const handleLiveText = (e) => {\r\n    socket.emit(\"live text\", e.target.value);\r\n  };\r\n\r\n  const messageClass = (m) => {\r\n    if (currConversation.isLive && user._id === m.senderId) {\r\n      return \"my-message\";\r\n    } else if (user._id === m.senderId) {\r\n      return \"my-message\";\r\n    } else {\r\n      return \"their-message\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Chat\">\r\n      <div ref={chatBottom}></div>\r\n      {chatLog && (\r\n        <ul className=\"chat-log\">\r\n          <div className=\"chat-bottom\"></div>\r\n          {currConversation.isLive && theirLiveText && (\r\n            <li>\r\n              <div className=\"their-live-text\">{theirLiveText}</div>\r\n            </li>\r\n          )}\r\n          {chatLog.map((m, index) => (\r\n            <li\r\n              key={index}\r\n              className={\r\n                user._id === m.senderId\r\n                  ? \"my-message-line\"\r\n                  : \"their-message-line\"\r\n              }\r\n            >\r\n              <div className={user && messageClass(m)}>{m.content}</div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n      <form onSubmit={handleMessage} className=\"message-form\" ref={messageRef}>\r\n        <input\r\n          onChange={(e) => {\r\n            currConversation.isLive && handleLiveText(e);\r\n          }}\r\n          className={\r\n            currConversation.isLive\r\n              ? \"message-input live-message-input\"\r\n              : \"message-input\"\r\n          }\r\n          name=\"message\"\r\n          autoComplete=\"off\"\r\n        ></input>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\SocketContext.js",["75","76"],"import { io } from \"socket.io-client\";\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { useAuth } from \"./AuthContext\";\r\nimport { useChat } from \"./ChatContext\";\r\n\r\nconst SocketContext = React.createContext();\r\n\r\nexport function useSocket() {\r\n  return useContext(SocketContext);\r\n}\r\n\r\nexport function SocketProvider({ children }) {\r\n  const [socket, setSocket] = useState(null);\r\n  const { user } = useAuth();\r\n  const {\r\n    contactsList,\r\n    setChatLog,\r\n    currConversation,\r\n    updateOnlineStatus,\r\n    updateLiveStatus,\r\n    theirLiveText,\r\n    setTheirLiveText,\r\n  } = useChat();\r\n  // const [theirLiveCursor, setTheirLiveCursor] = useState(0);\r\n\r\n  const startSocketConnection = (userObj) => {\r\n    setSocket(\r\n      io(`${process.env.REACT_APP_PORT_SERVER}/chat`, {\r\n        query: userObj,\r\n        withCredentials: true,\r\n      })\r\n    );\r\n  };\r\n\r\n  const isContact = async (userData) => {\r\n    if (contactsList) {\r\n      const found = await contactsList.find(\r\n        (contact) => userData.userId === contact._id\r\n      );\r\n      return found ? true : false;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const clientIsRecipient = (userData) => {\r\n    const answer = userData.recipientId === user._id;\r\n    return answer;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket && user) {\r\n      socket.on(\"connect\", () => {\r\n        socket.emit(\"online status\", { userId: user._id, isOnline: true });\r\n        console.log(`Send status: ${user.username} is online.`);\r\n      });\r\n\r\n      socket.on(\"user status update\", (userData) => {\r\n        const userIsContact = isContact(userData);\r\n        if (userIsContact) {\r\n          updateOnlineStatus(userData);\r\n        }\r\n        socket.emit(\"user status back\", { userId: user._id, isOnline: true });\r\n      });\r\n\r\n      socket.on(\"user status back\", (userData) => {\r\n        const userIsContact = isContact(userData);\r\n        if (userIsContact) {\r\n          updateOnlineStatus(userData);\r\n        }\r\n      });\r\n\r\n      socket.on(\"user is live\", async (userData) => {\r\n        const userIsContact = await isContact(userData);\r\n        const isLive = clientIsRecipient(userData);\r\n        if (userIsContact) {\r\n          updateLiveStatus(userData, isLive);\r\n        }\r\n        console.log(userData);\r\n      });\r\n\r\n      socket.on(\"user logged out\", (userData) => {\r\n        updateOnlineStatus(userData);\r\n      });\r\n\r\n      socket.on(\"message\", (msg) => {\r\n        if (theirLiveText) {\r\n          setTheirLiveText(\"\");\r\n        }\r\n        setChatLog((prevConversation) => [msg, ...prevConversation]);\r\n      });\r\n      socket.on(\"live text\", async (liveText) => {\r\n        setTheirLiveText(liveText);\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  const values = {\r\n    socket,\r\n    setSocket,\r\n    startSocketConnection,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={values}>{children}</SocketContext.Provider>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\Contacts.js",["77"],"import React, { useState, useEffect } from \"react\";\r\nimport { useAuth } from \"../Context/AuthContext\";\r\nimport { useChat } from \"../Context/ChatContext\";\r\nimport { useSocket } from \"../Context/SocketContext\";\r\n\r\nexport default function Contacts(props) {\r\n  const {\r\n    // setUser,\r\n    // chatLog,\r\n    setChatLog,\r\n    contactsList,\r\n    currConversation,\r\n    setCurrConversation,\r\n  } = useChat();\r\n  const { user } = useAuth();\r\n  const { socket } = useSocket();\r\n  const [selectedContact, setSelectedContact] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    currConversation && console.log(currConversation);\r\n  }, [currConversation, currConversation]);\r\n\r\n  const openConversation = async (contact) => {\r\n    // if (currConversation.username !== contact.username) {\r\n    const roomId = (await contact.isLive)\r\n      ? contact.roomId\r\n      : `${contact.username}${user.username}`;\r\n    const userData = {\r\n      userId: user._id,\r\n      recipientId: contact._id,\r\n      isLive: true,\r\n      roomId: roomId,\r\n    };\r\n    socket.emit(\"join room\", userData);\r\n    setCurrConversation(() => {\r\n      return { ...contact, roomId: userData.roomId };\r\n    });\r\n    socket.once(\"chat history\", (messages) => {\r\n      setChatLog(messages);\r\n    });\r\n    setSelectedContact(contact._id);\r\n    // }\r\n  };\r\n\r\n  const contactClass = (contact) => {\r\n    if (contact.isLive && contact._id === selectedContact) {\r\n      return \"contact live-contact-open\";\r\n    } else if (contact.isLive) {\r\n      return \"contact live-contact\";\r\n    } else if (contact.isOnline && contact._id === selectedContact) {\r\n      return \"contact online-contact-open\";\r\n    } else if (contact.isOnline) {\r\n      return \"contact online-contact\";\r\n    } else if (contact._id === selectedContact) {\r\n      return \"contact selected-contact\";\r\n    } else {\r\n      return \"contact inactive-contact\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"connections\">\r\n      {contactsList &&\r\n        contactsList.map((contact, index) => (\r\n          <span\r\n            onClick={() => openConversation(contact)}\r\n            className={contactClass(contact)}\r\n          >\r\n            {contact.username}\r\n          </span>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\AddConnection.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\ChatContext.js",["78","79"],"import React, { useContext, useState, useEffect } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = React.createContext();\r\n\r\n// export function useChat() {\r\n//   return useContext(ChatContext);\r\n// }\r\n\r\nfunction ChatProvider({ children }) {\r\n  const [chatLog, setChatLog] = useState(null);\r\n  const [contactsList, setContactsList] = useState(null);\r\n  const [currConversation, setCurrConversation] = useState(\"\");\r\n  const [theirLiveText, setTheirLiveText] = useState(\"\");\r\n  // let history = useHistory();\r\n\r\n  const createContactsList = (contactsArray) => {\r\n    const startingList = contactsArray.map((contact) => {\r\n      const contObj = {\r\n        _id: contact._id,\r\n        username: contact.username,\r\n        isLive: false,\r\n        isOnline: false,\r\n        roomId: \"\",\r\n      };\r\n      return contObj;\r\n    });\r\n    setContactsList(startingList);\r\n  };\r\n\r\n  const updateOnlineStatus = (userData) => {\r\n    console.log(\r\n      `Online status for user ${userData.userId}: ${userData.isOnline}`\r\n    );\r\n    if (contactsList) {\r\n      const updatedList = contactsList.map((contact) => {\r\n        if (contact._id === userData.userId) {\r\n          const isOnline = userData.isOnline;\r\n          const updatedContact = {\r\n            ...contact,\r\n            isOnline,\r\n          };\r\n          return updatedContact;\r\n        }\r\n        return contact;\r\n      });\r\n\r\n      setContactsList(updatedList);\r\n    }\r\n  };\r\n\r\n  const updateLiveStatus = (userData, live) => {\r\n    // console.log(`Live status for user ${userData.id}: ${userData.isLive}`);\r\n    const updatedList = contactsList.map((contact) => {\r\n      if (contact._id === userData.userId) {\r\n        const liveStatus = live ? true : false;\r\n        const updatedContact = {\r\n          ...contact,\r\n          isLive: liveStatus,\r\n          isOnline: true,\r\n          roomId: userData.roomId,\r\n        };\r\n        console.log(`contact live status ${liveStatus}`);\r\n        return updatedContact;\r\n      }\r\n      return contact;\r\n    });\r\n    setContactsList(updatedList);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   fetch(process.env.REACT_APP_PORT_SERVER, {\r\n  //     headers: {\r\n  //       Authorization: \"Bearer \" + this.props.token,\r\n  //     },\r\n  //   })\r\n  //     .then((res) => res.json())\r\n  //     .then((res) => {\r\n  //       if (res.authenticated === false) {\r\n  //         console.log(\"Start session to enter chat.\");\r\n  //         history.push(\"/\");\r\n  //       } else {\r\n  //         setUser(res.user);\r\n  //         createContactsList(res.user.connections);\r\n  //         console.log(\r\n  //           `User ${res.user.username} has been correctly authenticated.`\r\n  //         );\r\n  //         history.push(\"/chat\");\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => console.log(err));\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (!user) {\r\n  //     fetch(process.env.REACT_APP_PORT_SERVER, {\r\n  //       credentials: \"include\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //       \"Access-Control-Allow-Origin\": process.env.REACT_APP_PORT_SERVER,\r\n  //     })\r\n  //       .then((res) => res.json())\r\n  //       .then((res) => {\r\n  //         if (res.authenticated === false) {\r\n  //           console.log(\"Start session to enter chat.\");\r\n  //           history.push(\"/\");\r\n  //         } else {\r\n  //           setUser(res.user);\r\n  //           createContactsList(res.user.connections);\r\n  //           console.log(\r\n  //             `User ${res.user.username} has been correctly authenticated.`\r\n  //           );\r\n  //           history.push(\"/chat\");\r\n  //         }\r\n  //       })\r\n  //       .catch((err) => console.log(err));\r\n  //   }\r\n  // }, []);\r\n\r\n  const values = {\r\n    chatLog,\r\n    setChatLog,\r\n    contactsList,\r\n    createContactsList,\r\n    updateOnlineStatus,\r\n    updateLiveStatus,\r\n    currConversation,\r\n    setCurrConversation,\r\n    theirLiveText,\r\n    setTheirLiveText,\r\n  };\r\n\r\n  return <ChatContext.Provider value={values}>{children}</ChatContext.Provider>;\r\n}\r\n\r\nconst useChat = () => React.useContext(ChatContext);\r\nexport { ChatProvider, useChat };\r\n","C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\AuthContext.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Context\\ContextProviders.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\LogInScreen.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\OptionsMenu.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\ChangeUsername.js",["80"],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\SaveAccount.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\LogOut.js",[],"C:\\Users\\User\\Projects\\chat-app\\client\\src\\Components\\OptionsMenu\\DeleteUser.js",["81","82","83"],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"93","line":35,"column":6,"nodeType":"94","endLine":35,"endColumn":8,"suggestions":"95"},{"ruleId":"88","severity":1,"message":"96","line":18,"column":5,"nodeType":"90","messageId":"91","endLine":18,"endColumn":21},{"ruleId":"92","severity":1,"message":"97","line":96,"column":6,"nodeType":"94","endLine":96,"endColumn":14,"suggestions":"98"},{"ruleId":"92","severity":1,"message":"99","line":21,"column":6,"nodeType":"94","endLine":21,"endColumn":42,"suggestions":"100"},{"ruleId":"88","severity":1,"message":"101","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":27},{"ruleId":"88","severity":1,"message":"102","line":1,"column":39,"nodeType":"90","messageId":"91","endLine":1,"endColumn":48},{"ruleId":"88","severity":1,"message":"103","line":6,"column":27,"nodeType":"90","messageId":"91","endLine":6,"endColumn":45},{"ruleId":"88","severity":1,"message":"104","line":8,"column":5,"nodeType":"90","messageId":"91","endLine":8,"endColumn":9},{"ruleId":"88","severity":1,"message":"105","line":10,"column":5,"nodeType":"90","messageId":"91","endLine":10,"endColumn":15},{"ruleId":"88","severity":1,"message":"106","line":11,"column":5,"nodeType":"90","messageId":"91","endLine":11,"endColumn":18},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createContactsList', 'startSocketConnection', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["109"],"'currConversation' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientIsRecipient', 'isContact', 'setChatLog', 'setTheirLiveText', 'theirLiveText', 'updateLiveStatus', 'updateOnlineStatus', and 'user'. Either include them or remove the dependency array.",["110"],"React Hook useEffect has a duplicate dependency: 'currConversation'. Either omit it or remove the dependency array.",["111"],"'useContext' is defined but never used.","'useEffect' is defined but never used.","'setUsernameSuccess' is assigned a value but never used.","'user' is assigned a value but never used.","'userIsTemp' is assigned a value but never used.","'setUserIsTemp' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [createContactsList, startSocketConnection, user]",{"range":"118","text":"119"},"Update the dependencies array to be: [clientIsRecipient, isContact, setChatLog, setTheirLiveText, socket, theirLiveText, updateLiveStatus, updateOnlineStatus, user]",{"range":"120","text":"121"},"Update the dependencies array to be: [currConversation]",{"range":"122","text":"123"},[1049,1051],"[createContactsList, startSocketConnection, user]",[2712,2720],"[clientIsRecipient, isContact, setChatLog, setTheirLiveText, socket, theirLiveText, updateLiveStatus, updateOnlineStatus, user]",[616,652],"[currConversation]"]